# Docker Compose override for production environment
#version: '3.8'

services:
  frontend:
    image: ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_SHA:-latest}
    environment:
      - REACT_APP_API_URL=http://${PRODUCTION_HOST}/api
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_VERSION=${CI_COMMIT_SHA:-latest}
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  backend:
    image: ${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_SHA:-latest}
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - ENABLE_SWAGGER=false
      - DATABASE_URL=${DATABASE_URL}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-reporting}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-${POSTGRES_PASSWORD}}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_URL=${REDIS_URL}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - AD_SERVER=${AD_SERVER}
      - AD_BASE_DN=${AD_BASE_DN}
      - AD_USERNAME=${AD_USERNAME}
      - AD_PASSWORD=${AD_PASSWORD}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - CREDENTIAL_ENCRYPTION_KEY=${CREDENTIAL_ENCRYPTION_KEY}
      - CREDENTIAL_ENCRYPTION_SALT=${CREDENTIAL_ENCRYPTION_SALT}
      - HELMET_CSP=true
      - CORS_ORIGIN=http://${PRODUCTION_HOST}
    volumes:
      - production-logs:/app/logs
      - production-reports:/app/reports
      - production-uploads:/app/uploads
      - /backups:/app/backups
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  nginx:
    image: ${CI_REGISTRY_IMAGE}/nginx:${CI_COMMIT_SHA:-latest}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  postgres:
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=reporting
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - production-postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    secrets:
      - postgres_password
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - production-redis-data:/data
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Monitoring removed - use health service endpoint at /health instead

  # Backup service
  db-backup:
    image: postgres:17-alpine
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - /backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: |
      sh -c '
        while true; do
          pg_dump -h postgres -U postgres reporting | gzip > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql.gz
          find /backups -name "backup_*.sql.gz" -mtime +7 -delete
          sleep 86400
        done
      '
    depends_on:
      - postgres
    restart: always

volumes:
  production-postgres-data:
  production-redis-data:
  production-logs:
  production-reports:
  production-uploads:

secrets:
  postgres_password:
    external: true

networks:
  default:
    name: production-reporting-network