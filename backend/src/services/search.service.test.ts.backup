import { searchService } from './search.service';
import { db } from '@/config/database';
import { logger } from '../utils/logger';

// Mock dependencies
jest.mock('@/config/database', () => ({
  db: {
    query: jest.fn()
  }
}));

jest.mock('../utils/logger', () => ({
  logger: {
    debug: jest.fn(),
    error: jest.fn(),
    info: jest.fn(),
    warn: jest.fn()
  }
}));

describe('SearchService', () => {
  const mockDbQuery = db.query as jest.MockedFunction<typeof db.query>;
  const mockLogger = logger as jest.Mocked<typeof logger>;

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('globalSearch', () => {
    const mockUserId = 1;
    const mockQuery = 'test query';

    beforeEach(() => {
      // Mock recordSearch query to prevent errors
      mockDbQuery.mockImplementation((query: string, params?: any[]) => {
        if (query.includes('user_search_history')) {
          return Promise.resolve({ rows: [] });
        }
        return Promise.resolve({ rows: [] });
      });
    });

    describe('template search functionality', () => {
      it('should search report templates successfully', async () => {
        const mockTemplates = [
          {
            id: 1,
            name: 'User Report',
            description: 'Test description',
            category: 'AD',
            report_type: 'users'
          },
          {
            id: 2,
            name: 'Computer Report', 
            description: 'Another test',
            category: 'AD',
            report_type: 'computers'
          }
        ];

        mockDbQuery.mockImplementation((query: string, params?: any[]) => {
          if (query.includes('report_templates')) {
            return Promise.resolve({ rows: mockTemplates });
          }
          if (query.includes('custom_report_templates')) {
            return Promise.resolve({ rows: [] });
          }
          if (query.includes('user_search_history')) {
            return Promise.resolve({ rows: [] });
          }
          return Promise.resolve({ rows: [] });
        });

        const result = await searchService.globalSearch(mockQuery, mockUserId, { types: ['template'] });

        expect(result).toHaveLength(2);
        expect(result[0]).toMatchObject({
          id: '1',
          title: 'User Report',
          description: 'Test description',
          type: 'template',
          path: '/templates?id=1',
          tags: ['AD', 'users'],
          metadata: {
            category: 'AD',
            dataSource: 'AD'
          }
        });
      });

      it('should handle templates without description', async () => {
        const mockTemplate = {
          id: 1,
          name: 'Test Report',
          description: null,
          category: 'Azure',
          report_type: 'users'
        };

        mockDbQuery.mockImplementation((query: string, params?: any[]) => {
          if (query.includes('report_templates')) {
            return Promise.resolve({ rows: [mockTemplate] });
          }
          if (query.includes('user_search_history')) {
            return Promise.resolve({ rows: [] });
          }
          return Promise.resolve({ rows: [] });
        });

        const result = await searchService.globalSearch(mockQuery, mockUserId);

        expect(result[0].description).toBeUndefined();
      });

      it('should use correct SQL parameters for template search', async () => {
        await searchService.globalSearch(mockQuery, mockUserId);

        expect(mockDbQuery).toHaveBeenCalledWith(
          expect.stringContaining('report_templates'),
          expect.arrayContaining(['%test query%', 20])
        );
      });

      it('should skip template search when type filter excludes templates', async () => {
        await searchService.globalSearch(mockQuery, mockUserId, { types: ['report'] });

        const templateCalls = (mockDbQuery.mock.calls as any[]).filter(call => 
          call[0].includes('FROM report_templates')
        );
        expect(templateCalls).toHaveLength(0);
      });
    });

    describe('custom report search functionality', () => {
      it('should search custom reports successfully', async () => {
        const mockCustomReports = [
          {
            id: 10,
            name: 'My Custom Report',
            description: 'Custom description',
            source: 'AD',
            is_public: true
          }
        ];

        mockDbQuery.mockImplementation((query: string, params?: any[]) => {
          if (query.includes('custom_report_templates')) {
            return Promise.resolve({ rows: mockCustomReports });
          }
          if (query.includes('user_search_history')) {
            return Promise.resolve({ rows: [] });
          }
          return Promise.resolve({ rows: [] });
        });

        const result = await searchService.globalSearch(mockQuery, mockUserId);

        expect(result).toHaveLength(1);
        expect(result[0]).toMatchObject({
          id: 'custom-10',
          title: 'My Custom Report',
          description: 'Custom description',
          type: 'report',
          path: '/reports/builder?id=10',
          tags: ['custom', 'AD'],
          favorite: false,
          metadata: {
            dataSource: 'AD',
            isPublic: true
          }
        });
      });

      it('should use correct SQL parameters for custom report search', async () => {
        await searchService.globalSearch(mockQuery, mockUserId);

        expect(mockDbQuery).toHaveBeenCalledWith(
          expect.stringContaining('custom_report_templates'),
          expect.arrayContaining([mockUserId, '%test query%', 20])
        );
      });

      it('should skip custom report search when type filter excludes reports', async () => {
        await searchService.globalSearch(mockQuery, mockUserId, { types: ['template'] });

        const customReportCalls = (mockDbQuery.mock.calls as any[]).filter(call => 
          call[0].includes('custom_report_templates')
        );
        expect(customReportCalls).toHaveLength(0);
      });
    });

    describe('static page search functionality', () => {
      it('should search static pages by title', async () => {
        const result = await searchService.globalSearch('dashboard', mockUserId, { types: ['page'] });

        const dashboardPage = result.find(r => r.id === 'page-dashboard');
        expect(dashboardPage).toBeDefined();
        expect(dashboardPage?.title).toBe('Dashboard');
      });

      it('should search static pages by description', async () => {
        const result = await searchService.globalSearch('visual builder', mockUserId, { types: ['page'] });

        const builderPage = result.find(r => r.id === 'page-builder');
        expect(builderPage).toBeDefined();
        expect(builderPage?.title).toBe('Report Builder');
      });

      it('should search static pages by tags', async () => {
        const result = await searchService.globalSearch('custom', mockUserId, { types: ['page'] });

        const builderPage = result.find(r => r.id === 'page-builder');
        expect(builderPage).toBeDefined();
      });

      it('should skip static page search when type filter excludes pages', async () => {
        const result = await searchService.globalSearch('dashboard', mockUserId, { types: ['template'] });

        const dashboardPage = result.find(r => r.id === 'page-dashboard');
        expect(dashboardPage).toBeUndefined();
      });

      it('should respect limit for static pages', async () => {
        const result = await searchService.globalSearch('settings', mockUserId, { limit: 1 });

        const settingsPages = result.filter(r => r.tags?.includes('settings'));
        expect(settingsPages.length).toBeLessThanOrEqual(1);
      });
    });

    describe('search result sorting and relevance', () => {
      it('should prioritize title matches over description matches', async () => {
        const mockTemplates = [
          {
            id: 1,
            name: 'Description test',
            description: 'user report details',
            category: 'AD',
            report_type: 'users'
          },
          {
            id: 2,
            name: 'user report',
            description: 'test description',
            category: 'AD', 
            report_type: 'computers'
          }
        ];

        mockDbQuery.mockImplementation((query: string, params?: any[]) => {
          if (query.includes('report_templates')) {
            return Promise.resolve({ rows: mockTemplates });
          }
          if (query.includes('custom_report_templates')) {
            return Promise.resolve({ rows: [] });
          }
          if (query.includes('user_search_history')) {
            return Promise.resolve({ rows: [] });
          }
          return Promise.resolve({ rows: [] });
        });

        const result = await searchService.globalSearch('user', mockUserId, { types: ['template'] });

        // "user report" (title match) should come before "Description test" (description match)
        expect(result[0].title).toBe('user report');
        expect(result[1].title).toBe('Description test');
      });

      it('should return results in consistent order when no title matches', async () => {
        const mockTemplates = [
          {
            id: 1,
            name: 'First Report',
            description: 'contains search term',
            category: 'AD',
            report_type: 'users'
          },
          {
            id: 2,
            name: 'Second Report',
            description: 'also contains search term',
            category: 'AD',
            report_type: 'computers'
          }
        ];

        mockDbQuery.mockImplementation((query: string, params?: any[]) => {
          if (query.includes('report_templates')) {
            return Promise.resolve({ rows: mockTemplates });
          }
          if (query.includes('custom_report_templates')) {
            return Promise.resolve({ rows: [] });
          }
          if (query.includes('user_search_history')) {
            return Promise.resolve({ rows: [] });
          }
          return Promise.resolve({ rows: [] });
        });

        const result = await searchService.globalSearch('search', mockUserId, { types: ['template'] });

        expect(result).toHaveLength(2);
        // Order should be preserved from database result
        expect(result[0].title).toBe('First Report');
        expect(result[1].title).toBe('Second Report');
      });
    });

    describe('pagination and limits', () => {
      it('should respect the limit parameter', async () => {
        const mockTemplates = Array.from({ length: 30 }, (_, i) => ({
          id: i + 1,
          name: `Test Report ${i + 1}`,
          description: 'test description',
          category: 'AD',
          report_type: 'users'
        }));

        mockDbQuery.mockImplementation((query: string, params?: any[]) => {
          if (query.includes('report_templates')) {
            return Promise.resolve({ rows: mockTemplates });
          }
          if (query.includes('user_search_history')) {
            return Promise.resolve({ rows: [] });
          }
          return Promise.resolve({ rows: [] });
        });

        const result = await searchService.globalSearch(mockQuery, mockUserId, { limit: 5 });

        expect(result.length).toBeLessThanOrEqual(5);
      });

      it('should use default limit of 20 when not specified', async () => {
        await searchService.globalSearch(mockQuery, mockUserId);

        expect(mockDbQuery).toHaveBeenCalledWith(
          expect.any(String),
          expect.arrayContaining([expect.any(String), 20])
        );
      });

      it('should pass limit to individual query methods', async () => {
        const customLimit = 10;
        await searchService.globalSearch(mockQuery, mockUserId, { limit: customLimit });

        const calls = mockDbQuery.mock.calls as any[];
        const templateCall = calls.find(call => call[0].includes('report_templates'));
        const customReportCall = calls.find(call => call[0].includes('custom_report_templates'));

        if (templateCall) {
          expect(templateCall[1]).toContain(customLimit);
        }
        if (customReportCall) {
          expect(customReportCall[1]).toContain(customLimit);
        }
      });
    });

    describe('SQL injection prevention', () => {
      it('should properly parameterize search terms', async () => {
        const maliciousQuery = "'; DROP TABLE users; --";
        
        await searchService.globalSearch(maliciousQuery, mockUserId);

        // Verify that the malicious query is parameterized, not directly concatenated
        const calls = mockDbQuery.mock.calls as any[];
        let foundParamaterizedQuery = false;
        
        calls.forEach(call => {
          expect(call[0]).not.toContain("'; DROP TABLE users; --");
          if (call[1] && Array.isArray(call[1])) {
            const hasParam = call[1].some((param: any) => 
              typeof param === 'string' && param.includes("'; DROP TABLE users; --")
            );
            if (hasParam) {
              foundParamaterizedQuery = true;
            }
          }
        });
        
        // At least one call should have the malicious query as a parameter
        expect(foundParamaterizedQuery).toBe(true);
      });

      it('should handle special SQL characters safely', async () => {
        const specialCharsQuery = "test% _query 'with' \"quotes\"";
        
        await searchService.globalSearch(specialCharsQuery, mockUserId);

        // Should not throw an error and should parameterize properly
        expect(mockDbQuery).toHaveBeenCalled();
      });
    });

    describe('search history recording', () => {
      it('should record search history on successful search', async () => {
        await searchService.globalSearch(mockQuery, mockUserId);

        const searchHistoryCalls = (mockDbQuery.mock.calls as any[]).filter(call =>
          call[0].includes('user_search_history') && call[0].includes('INSERT')
        );

        expect(searchHistoryCalls).toHaveLength(1);
        expect(searchHistoryCalls[0][1]).toEqual([
          mockUserId,
          mockQuery,
          expect.any(Date)
        ]);
      });

      it('should not fail search if history recording fails', async () => {
        mockDbQuery.mockImplementation((query: string, params?: any[]) => {
          if (query.includes('INSERT INTO user_search_history')) {
            throw new Error('History recording failed');
          }
          return Promise.resolve({ rows: [] });
        });

        await expect(searchService.globalSearch(mockQuery, mockUserId)).resolves.not.toThrow();
        expect(mockLogger.error).toHaveBeenCalledWith('Error recording search:', expect.any(Error));
      });
    });

    describe('error handling', () => {
      it('should propagate database errors', async () => {
        const dbError = new Error('Database connection failed');
        mockDbQuery.mockRejectedValue(dbError);

        await expect(searchService.globalSearch(mockQuery, mockUserId)).rejects.toThrow(dbError);
        expect(mockLogger.error).toHaveBeenCalledWith('Search error:', dbError);
      });

      it('should handle empty search query', async () => {
        const result = await searchService.globalSearch('', mockUserId);

        expect(result).toBeDefined();
        expect(Array.isArray(result)).toBe(true);
      });

      it('should handle null/undefined search parameters', async () => {
        await expect(searchService.globalSearch(mockQuery, mockUserId, undefined)).resolves.not.toThrow();
      });
    });

    describe('type filtering', () => {
      it('should filter by single type', async () => {
        const mockTemplates = [{ id: 1, name: 'Test', description: 'Test', category: 'AD', report_type: 'users' }];
        
        mockDbQuery.mockImplementation((query: string, params?: any[]) => {
          if (query.includes('report_templates')) {
            return Promise.resolve({ rows: mockTemplates });
          }
          return Promise.resolve({ rows: [] });
        });

        const result = await searchService.globalSearch(mockQuery, mockUserId, { types: ['template'] });

        expect(result.every(r => r.type === 'template')).toBe(true);
      });

      it('should filter by multiple types', async () => {
        const mockTemplates = [{ id: 1, name: 'Test', description: 'Test', category: 'AD', report_type: 'users' }];
        const mockCustomReports = [{ id: 1, name: 'Custom', description: 'Custom', source: 'AD', is_public: true }];

        mockDbQuery.mockImplementation((query: string, params?: any[]) => {
          if (query.includes('report_templates')) {
            return Promise.resolve({ rows: mockTemplates });
          }
          if (query.includes('custom_report_templates')) {
            return Promise.resolve({ rows: mockCustomReports });
          }
          return Promise.resolve({ rows: [] });
        });

        const result = await searchService.globalSearch(mockQuery, mockUserId, { types: ['template', 'report'] });

        expect(result.some(r => r.type === 'template')).toBe(true);
        expect(result.some(r => r.type === 'report')).toBe(true);
      });
    });
  });

  describe('getSuggestions', () => {
    const mockUserId = 1;
    const mockQuery = 'test';

    it('should return search suggestions from recent searches and templates', async () => {
      const mockRecentSearches = [
        { query: 'test query 1' },
        { query: 'test query 2' }
      ];
      const mockTemplates = [
        { name: 'Test Template 1' },
        { name: 'Test Template 2' }  
      ];

      mockDbQuery.mockImplementation((query: string, params?: any[]) => {
        if (query.includes('user_search_history')) {
          return Promise.resolve({ rows: mockRecentSearches });
        }
        if (query.includes('report_templates')) {
          return Promise.resolve({ rows: mockTemplates });
        }
        return Promise.resolve({ rows: [] });
      });

      const result = await searchService.getSuggestions(mockQuery, mockUserId);

      expect(result).toEqual([
        'test query 1',
        'test query 2', 
        'Test Template 1',
        'Test Template 2'
      ]);
    });

    it('should deduplicate suggestions', async () => {
      const mockRecentSearches = [
        { query: 'test query' },
        { query: 'test query' } // Duplicate
      ];
      const mockTemplates = [
        { name: 'test query' }, // Duplicate with recent search
        { name: 'Test Template' }
      ];

      mockDbQuery.mockImplementation((query: string, params?: any[]) => {
        if (query.includes('user_search_history')) {
          return Promise.resolve({ rows: mockRecentSearches });
        }
        if (query.includes('report_templates')) {
          return Promise.resolve({ rows: mockTemplates });
        }
        return Promise.resolve({ rows: [] });
      });

      const result = await searchService.getSuggestions(mockQuery, mockUserId);

      expect(result).toEqual(['test query', 'Test Template']);
    });

    it('should limit suggestions to 10 items', async () => {
      const mockRecentSearches = Array.from({ length: 8 }, (_, i) => ({ query: `test query ${i}` }));
      const mockTemplates = Array.from({ length: 8 }, (_, i) => ({ name: `Test Template ${i}` }));

      mockDbQuery.mockImplementation((query: string, params?: any[]) => {
        if (query.includes('user_search_history')) {
          return Promise.resolve({ rows: mockRecentSearches });
        }
        if (query.includes('report_templates')) {
          return Promise.resolve({ rows: mockTemplates });
        }
        return Promise.resolve({ rows: [] });
      });

      const result = await searchService.getSuggestions(mockQuery, mockUserId);

      expect(result.length).toBeLessThanOrEqual(10);
    });

    it('should use correct SQL parameters', async () => {
      await searchService.getSuggestions(mockQuery, mockUserId);

      expect(mockDbQuery).toHaveBeenCalledWith(
        expect.stringContaining('user_search_history'),
        [mockUserId, '%test%']
      );

      expect(mockDbQuery).toHaveBeenCalledWith(
        expect.stringContaining('report_templates'),
        ['%test%']
      );
    });

    it('should return empty array on database error', async () => {
      mockDbQuery.mockRejectedValue(new Error('Database error'));

      const result = await searchService.getSuggestions(mockQuery, mockUserId);

      expect(result).toEqual([]);
      expect(mockLogger.error).toHaveBeenCalledWith('Suggestions error:', expect.any(Error));
    });

    it('should handle empty query gracefully', async () => {
      const result = await searchService.getSuggestions('', mockUserId);

      expect(result).toBeDefined();
      expect(Array.isArray(result)).toBe(true);
    });
  });

  describe('getRecentSearches', () => {
    const mockUserId = 1;

    it('should return recent searches for user', async () => {
      const mockSearches = [
        { query: 'recent query 1' },
        { query: 'recent query 2' },
        { query: 'recent query 3' }
      ];

      mockDbQuery.mockResolvedValue({ rows: mockSearches });

      const result = await searchService.getRecentSearches(mockUserId);

      expect(result).toEqual(['recent query 1', 'recent query 2', 'recent query 3']);
    });

    it('should use correct SQL parameters', async () => {
      mockDbQuery.mockResolvedValue({ rows: [] });

      await searchService.getRecentSearches(mockUserId);

      expect(mockDbQuery).toHaveBeenCalledWith(
        expect.stringContaining('DISTINCT query'),
        [mockUserId]
      );
    });

    it('should limit results to 10 items', async () => {
      await searchService.getRecentSearches(mockUserId);

      const call = mockDbQuery.mock.calls.find(call => 
        call[0].includes('LIMIT 10')
      );
      expect(call).toBeDefined();
    });

    it('should return empty array on database error', async () => {
      mockDbQuery.mockRejectedValue(new Error('Database error'));

      const result = await searchService.getRecentSearches(mockUserId);

      expect(result).toEqual([]);
      expect(mockLogger.error).toHaveBeenCalledWith('Recent searches error:', expect.any(Error));
    });

    it('should handle user with no search history', async () => {
      mockDbQuery.mockResolvedValue({ rows: [] });

      const result = await searchService.getRecentSearches(mockUserId);

      expect(result).toEqual([]);
    });
  });

  describe('recordSearch (private method)', () => {
    const mockUserId = 1;
    const mockQuery = 'test query';

    it('should record search with ON CONFLICT handling', async () => {
      mockDbQuery.mockResolvedValue({ rows: [] });

      // Call globalSearch to trigger recordSearch
      await searchService.globalSearch(mockQuery, mockUserId);

      const searchHistoryCall = (mockDbQuery.mock.calls as any[]).find(call =>
        call[0].includes('INSERT INTO user_search_history')
      );

      expect(searchHistoryCall).toBeDefined();
      expect(searchHistoryCall[0]).toContain('ON CONFLICT (user_id, query)');
      expect(searchHistoryCall[0]).toContain('DO UPDATE SET searched_at');
      expect(searchHistoryCall[1]).toEqual([
        mockUserId,
        mockQuery,
        expect.any(Date)
      ]);
    });

    it('should not throw error if recording fails', async () => {
      mockDbQuery.mockImplementation((query: string, params?: any[]) => {
        if (query.includes('INSERT INTO user_search_history')) {
          throw new Error('Recording failed');
        }
        return Promise.resolve({ rows: [] });
      });

      await expect(searchService.globalSearch(mockQuery, mockUserId)).resolves.not.toThrow();
      expect(mockLogger.error).toHaveBeenCalledWith('Error recording search:', expect.any(Error));
    });
  });

  describe('getStaticPages (private method)', () => {
    it('should return predefined static pages', async () => {
      // Test by searching for a static page
      const result = await searchService.globalSearch('dashboard', 1, { types: ['page'] });
      
      const dashboardPage = result.find(r => r.id === 'page-dashboard');
      expect(dashboardPage).toMatchObject({
        id: 'page-dashboard',
        title: 'Dashboard',
        description: 'View reporting dashboard and statistics',
        type: 'page',
        path: '/dashboard',
        tags: ['home', 'overview', 'stats', 'dashboard']
      });
    });

    it('should include all expected static pages', async () => {
      const result = await searchService.globalSearch('', 1, { types: ['page', 'setting'] });
      
      const pageIds = result.map(r => r.id);
      const expectedPages = [
        'page-dashboard',
        'page-templates', 
        'page-builder',
        'page-history',
        'page-scheduled',
        'page-settings',
        'page-credentials',
        'page-notifications'
      ];

      expectedPages.forEach(pageId => {
        expect(pageIds).toContain(pageId);
      });
    });

    it('should have proper structure for all static pages', async () => {
      const result = await searchService.globalSearch('', 1, { types: ['page', 'setting'] });
      
      result.forEach(page => {
        expect(page).toHaveProperty('id');
        expect(page).toHaveProperty('title');
        expect(page).toHaveProperty('description');
        expect(page).toHaveProperty('type');
        expect(page).toHaveProperty('path');
        expect(page).toHaveProperty('tags');
        expect(Array.isArray(page.tags)).toBe(true);
        expect(['page', 'setting']).toContain(page.type);
      });
    });
  });

  describe('case sensitivity and search matching', () => {
    it('should perform case-insensitive searches', async () => {
      const mockTemplates = [
        {
          id: 1,
          name: 'USER REPORT',
          description: 'Test Description',
          category: 'AD',
          report_type: 'users'
        }
      ];

      mockDbQuery.mockImplementation((query: string, params?: any[]) => {
        if (query.includes('report_templates')) {
          return Promise.resolve({ rows: mockTemplates });
        }
        if (query.includes('custom_report_templates')) {
          return Promise.resolve({ rows: [] });
        }
        if (query.includes('user_search_history')) {
          return Promise.resolve({ rows: [] });
        }
        return Promise.resolve({ rows: [] });
      });

      const result = await searchService.globalSearch('user report', 1, { types: ['template'] });

      expect(result).toHaveLength(1);
      expect(result[0].title).toBe('USER REPORT');
    });

    it('should handle partial matches with LIKE operator', async () => {
      await searchService.globalSearch('user', 1);

      const templateCall = (mockDbQuery.mock.calls as any[]).find(call =>
        call[0].includes('report_templates')
      );

      expect(templateCall[1][0]).toBe('%user%');
    });
  });

  describe('performance and large datasets', () => {
    it('should handle large result sets with proper limits', async () => {
      const largeTemplateSet = Array.from({ length: 1000 }, (_, i) => ({
        id: i + 1,
        name: `Template ${i + 1}`,
        description: 'test description',
        category: 'AD',
        report_type: 'users'
      }));

      mockDbQuery.mockImplementation((query: string, params?: any[]) => {
        if (query.includes('report_templates')) {
          return Promise.resolve({ rows: largeTemplateSet.slice(0, 20) }); // Simulate LIMIT
        }
        if (query.includes('user_search_history')) {
          return Promise.resolve({ rows: [] });
        }
        return Promise.resolve({ rows: [] });
      });

      const result = await searchService.globalSearch('test', 1);

      expect(result.length).toBeLessThanOrEqual(20);
    });

    it('should handle concurrent searches gracefully', async () => {
      mockDbQuery.mockResolvedValue({ rows: [] });

      const searches = Array.from({ length: 10 }, (_, i) => 
        searchService.globalSearch(`query ${i}`, i + 1)
      );

      await expect(Promise.all(searches)).resolves.not.toThrow();
    });
  });

  describe('edge cases and boundary conditions', () => {
    it('should handle very long search queries', async () => {
      const longQuery = 'a'.repeat(1000);
      
      await expect(searchService.globalSearch(longQuery, 1)).resolves.not.toThrow();
    });

    it('should handle special Unicode characters', async () => {
      const unicodeQuery = '测试 query émojis 🔍';
      
      await expect(searchService.globalSearch(unicodeQuery, 1)).resolves.not.toThrow();
    });

    it('should handle zero limit gracefully', async () => {
      const result = await searchService.globalSearch('test', 1, { limit: 0 });
      
      expect(result).toHaveLength(0);
    });

    it('should handle negative user IDs', async () => {
      await expect(searchService.globalSearch('test', -1)).resolves.not.toThrow();
    });

    it('should handle null/undefined in database results', async () => {
      const mockTemplate = {
        id: 1,
        name: 'Valid Name', // Need a valid name to avoid null reference errors
        description: null,
        category: 'AD',
        report_type: null
      };

      mockDbQuery.mockImplementation((query: string, params?: any[]) => {
        if (query.includes('report_templates')) {
          return Promise.resolve({ rows: [mockTemplate] });
        }
        if (query.includes('custom_report_templates')) {
          return Promise.resolve({ rows: [] });
        }
        if (query.includes('user_search_history')) {
          return Promise.resolve({ rows: [] });
        }
        return Promise.resolve({ rows: [] });
      });

      await expect(searchService.globalSearch('test', 1)).resolves.not.toThrow();
    });
  });
});